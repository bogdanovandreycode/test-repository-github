// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let board = ['', '', '', '', '', '', '', '', ''];
let currentPlayer = 'X';
let gameActive = true;
let scores = {
    X: 0,
    O: 0,
    draws: 0
};

// –í–æ–∑–º–æ–∂–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
const winningConditions = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
];

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const statusDisplay = document.querySelector('.status');
const cells = document.querySelectorAll('.cell');
const xWinsDisplay = document.getElementById('xWins');
const oWinsDisplay = document.getElementById('oWins');
const drawsDisplay = document.getElementById('draws');

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—á–µ—Ç–∞ –∏–∑ localStorage
function loadScores() {
    const savedScores = localStorage.getItem('ticTacToeScores');
    if (savedScores) {
        scores = JSON.parse(savedScores);
        updateScoreDisplay();
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –≤ localStorage
function saveScores() {
    localStorage.setItem('ticTacToeScores', JSON.stringify(scores));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç–∞
function updateScoreDisplay() {
    xWinsDisplay.textContent = scores.X;
    oWinsDisplay.textContent = scores.O;
    drawsDisplay.textContent = scores.draws;
}

// –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
function currentPlayerDisplay() {
    return `–•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${currentPlayer}`;
}

function winningMessage() {
    return `–ò–≥—Ä–æ–∫ ${currentPlayer} –ø–æ–±–µ–¥–∏–ª!`;
}

function drawMessage() {
    return `–ù–∏—á—å—è!`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
function updateGameStatus(message) {
    statusDisplay.innerHTML = message;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initializeGame() {
    updateGameStatus(currentPlayerDisplay());
    loadScores();
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞
function makeMove(cellIndex) {
    if (board[cellIndex] !== '' || !gameActive) {
        return;
    }

    board[cellIndex] = currentPlayer;
    cells[cellIndex].innerHTML = currentPlayer;
    cells[cellIndex].classList.add(currentPlayer.toLowerCase());
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ —Ö–æ–¥–µ
    cells[cellIndex].style.animation = 'celebration 0.3s ease-in-out';
    setTimeout(() => {
        cells[cellIndex].style.animation = '';
    }, 300);

    checkResult();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
function checkResult() {
    let roundWon = false;
    let winningCombination = null;

    for (let i = 0; i < winningConditions.length; i++) {
        const [a, b, c] = winningConditions[i];
        if (board[a] && board[a] === board[b] && board[a] === board[c]) {
            roundWon = true;
            winningCombination = [a, b, c];
            break;
        }
    }

    if (roundWon) {
        updateGameStatus(winningMessage());
        gameActive = false;
        
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        if (winningCombination) {
            winningCombination.forEach(index => {
                cells[index].classList.add('winning-line');
            });
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
        scores[currentPlayer]++;
        saveScores();
        updateScoreDisplay();
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–±–µ–¥—ã
        statusDisplay.classList.add('winner-announcement');
        setTimeout(() => {
            statusDisplay.classList.remove('winner-announcement');
        }, 600);
        
        // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –ø–æ —è—á–µ–π–∫–∞–º
        cells.forEach(cell => cell.classList.add('disabled'));
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏—á—å—é
    if (!board.includes('')) {
        updateGameStatus(drawMessage());
        gameActive = false;
        scores.draws++;
        saveScores();
        updateScoreDisplay();
        cells.forEach(cell => cell.classList.add('disabled'));
        return;
    }

    // –°–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞
    currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
    updateGameStatus(currentPlayerDisplay());
}

// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
function restartGame() {
    board = ['', '', '', '', '', '', '', '', ''];
    gameActive = true;
    currentPlayer = 'X';
    
    updateGameStatus(currentPlayerDisplay());
    
    cells.forEach(cell => {
        cell.innerHTML = '';
        cell.className = 'cell'; // –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
    });
}

// –°–±—Ä–æ—Å –≤—Å–µ–≥–æ —Å—á–µ—Ç–∞
function resetAllScores() {
    scores = { X: 0, O: 0, draws: 0 };
    saveScores();
    updateScoreDisplay();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
function playSound(type) {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Ö–æ–¥–æ–≤ –∏ –ø–æ–±–µ–¥
    // const audio = new Audio(`sounds/${type}.mp3`);
    // audio.play().catch(e => console.log('–ó–≤—É–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω'));
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
document.addEventListener('keydown', function(event) {
    if (!gameActive) return;
    
    const keyMap = {
        'Numpad7': 0, 'Numpad8': 1, 'Numpad9': 2,
        'Numpad4': 3, 'Numpad5': 4, 'Numpad6': 5,
        'Numpad1': 6, 'Numpad2': 7, 'Numpad3': 8,
        'Digit7': 0, 'Digit8': 1, 'Digit9': 2,
        'Digit4': 3, 'Digit5': 4, 'Digit6': 5,
        'Digit1': 6, 'Digit2': 7, 'Digit3': 8
    };
    
    if (keyMap.hasOwnProperty(event.code)) {
        makeMove(keyMap[event.code]);
    }
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –ø—Ä–æ–±–µ–ª
    if (event.code === 'Space') {
        event.preventDefault();
        restartGame();
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
function showKeyboardHint() {
    const hint = document.createElement('div');
    hint.innerHTML = `
        <small style="color: #718096; margin-top: 10px; display: block;">
            üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã 1-9 –¥–ª—è —Ö–æ–¥–æ–≤, –ø—Ä–æ–±–µ–ª –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        </small>
    `;
    document.querySelector('.container').appendChild(hint);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializeGame();
    showKeyboardHint();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç–∞ –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º –ø–æ –æ–±–ª–∞—Å—Ç–∏ —Å—á–µ—Ç–∞
    document.querySelector('.score').addEventListener('dblclick', function() {
        if (confirm('–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å —Å—á–µ—Ç?')) {
            resetAllScores();
        }
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        makeMove,
        restartGame,
        checkResult,
        board,
        currentPlayer,
        gameActive
    };
}
